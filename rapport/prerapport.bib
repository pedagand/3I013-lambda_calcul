

@article{church:lambda-calcul,
  author =        {A. Church},
  journal =       {Amer. J. Math.},
  pages =         {345--363},
  title =         {{An Unsolvable Problem of Elementary Number Theory}},
  volume =        {58},
  year =          {1936},
}

@book{pierce:tapl,
  author =        {Pierce, Benjamin C.},
  month =         feb,
  publisher =     {MIT Press},
  title =         {{Types and programming languages}},
  year =          {2002},
  isbn =          {0262162091},
}

@article{church:simple-type,
  author =        {Alonzo Church},
  journal =       {The Journal of Symbolic Logic},
  number =        {2},
  pages =         {56-68},
  publisher =     {Association for Symbolic Logic},
  title =         {A Formulation of the Simple Theory of Types},
  volume =        {5},
  year =          {1940},
  issn =          {00224812},
}

@article{milner:no-wrong,
  author =        {Robin Milner},
  journal =       {Journal of Computer and System Sciences},
  month =         {12},
  number =        {3},
  pages =         {348--375},
  title =         {A theory of type polymorphism in programming},
  volume =        {17},
  year =          {1978},
  doi =           {10.1016/0022-0000(78)90014-4},
}

@book{hottbook,
  address =       {Institute for Advanced Study},
  author =        {The {Univalent Foundations Program}},
  publisher =     {\url{http://homotopytypetheory.org/book}},
  title =         {Homotopy Type Theory: Univalent Foundations of
                   Mathematics},
  year =          {2013},
}

@book{thompson:types-fp,
  author =        {Simon Thompson},
  publisher =     {Addison-Wesley},
  series =        {International computer science series},
  title =         {Type theory and functional programming},
  year =          {1991},
  isbn =          {978-0-201-41667-1},
}

@inproceedings{mcbride:not-a-variable,
  author =        {McBride, Conor and McKinna, James},
  booktitle =     {Workshop on Haskell},
  pages =         {1--9},
  publisher =     {ACM},
  series =        {Haskell '04},
  title =         {{Functional pearl: i am not a number--i am a free
                   variable}},
  year =          {2004},
  abstract =      {{In this paper, we show how to manipulate syntax with
                   binding using a mixed representation of names for
                   free variables (with respect to the task in hand) and
                   de Bruijn indices [5] for bound variables. By doing
                   so, we retain the advantages of both representations:
                   naming supports easy, arithmetic-free manipulation of
                   terms; de Bruijn indices eliminate the need for
                   α-conversion. Further, we have ensured that not only
                   the user but also the implementation need never deal
                   with de Bruijn indices, except within key basic
                   operations.Moreover, we give a hierarchical
                   representation for names which naturally reflects the
                   structure of the operations we implement. Name choice
                   is safe and straightforward. Our technology combines
                   easily with an approach to syntax manipulation
                   inspired by Huet's 'zippers'[10].Without the ideas in
                   this paper, we would have struggled to implement
                   EPIGRAM [19]. Our example-constructing inductive
                   elimination operators for datatype families-is but
                   one of many where it proves invaluable.}},
  doi =           {10.1145/1017472.1017477},
}

@article{chargueraud:locally-nameless,
  author =        {Chargu{\'e}raud, Arthur},
  journal =       {Journal of Automated Reasoning},
  number =        {3},
  pages =         {363--408},
  title =         {The Locally Nameless Representation},
  volume =        {49},
  year =          {2011},
  abstract =      {This paper provides an introduction to the locally
                   nameless approach to the representation of syntax
                   with variable binding, focusing in particular on the
                   use of this technique in formal proofs. First, we
                   explain the benefits of representing bound variables
                   with de Bruijn indices while retaining names for free
                   variables. Then, we explain how to describe and
                   manipulate syntax in that form, and show how to
                   define and reason about judgments on locally nameless
                   terms.},
  doi =           {10.1007/s10817-011-9225-2},
}

@article{loeh:tuto-dependant,
  author =        {L\"{o}h, Andres and McBride, Conor and
                   Swierstra, Wouter},
  journal =       {Fundamenta Informaticae},
  pages =         {1001--1032},
  title =         {{A tutorial implementation of a dependently typed
                   lambda calculus}},
  volume =        {XXI},
  year =          {2001},
}

@incollection{coquand:mini-tt,
  author =        {Thierry Coquand and Yoshiki Kinoshita and
                   Bengt Nordström and Makoto Takeyama},
  booktitle =     {From Semantics to Computer Science},
  editor =        {Yves Bertot and Gérard Huet and Jean-Jacques Lévy and
                   Gordon Plotkin},
  pages =         {139--164},
  publisher =     {Cambridge University Press},
  title =         {A simple type-theoretic language: Mini-TT},
  year =          {2009},
  doi =           {10.1017/CBO9780511770524.007},
}

