#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Implémentation de la théorie des types Dépendants
\end_layout

\begin_layout Author
Delgado roman 
\end_layout

\begin_layout Abstract
Ce document représente la synthèse de mes premières lectures ainsi que de
 ma compréhension du sujet.
 Ce projet consistant en l'implémentation d'un système de type.
 Il sera donc question de définir les principaux concepts que j'ai pu aborder
 lors de mes lectures.
 La deuxième partie se concentre sur une implémentation du lambda calcul
 qui fait office de travail préliminaire au projet.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Théorie 
\end_layout

\begin_layout Subsection
Lambda Calcul non typé
\end_layout

\begin_layout Subsubsection
Un modèle de calcul universel
\end_layout

\begin_layout Standard
Dans les années 1930, Alonzo church commença son travail sur le lambda calcul.
 Le lambda calcul est un modèle de calcul universel au même titre que les
 machines de Turing.
 A l'aide d'une syntaxe simple il permet d'étudier les propriétés du calcul
 de façon formelle.
 Les fonctions ne portent pas de nom et ne sont applicables que à un seul
 argument.
 En 1936 Church publie dans son article "An unsolvable problem of elementary
 number theory" présentant le lambda calcul non typé.
 Celui ci est très souple car tout est fonction, cela permet donc de se
 concentrer sur la partie calculatoire.
 
\end_layout

\begin_layout Subsubsection
Syntaxe 
\end_layout

\begin_layout Standard
On peut définir le lambda calcul non typé de la façon suivante:
\end_layout

\begin_layout LyX-Code
t::=                    lambda terme
\end_layout

\begin_layout LyX-Code
      x                 variable
\end_layout

\begin_layout LyX-Code
      
\begin_inset Formula $\Lambda$
\end_inset

x.t              abstraction
\end_layout

\begin_layout LyX-Code
      t t               application
\end_layout

\begin_layout Standard
Pour faire une analogie avec les languages de programmation, on peut dire
 qu'une abstraction est une définition de fonction et que l'application
 consiste à appliquer une fonction un argument (qui dans le lambda calcul
 est aussi une fonction).
 On peut donc définir un lambda terme représentant la fonction identité
 de la façon suivante 
\begin_inset Formula $\Lambda$
\end_inset

x.x .
 Il existe de nombreuses façons de représenter les lambda termes, ici il
 est question de celle utilisée par Pierce dans son ouvrage 
\begin_inset Quotes eld
\end_inset

Types and programming languages
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Réduction
\end_layout

\begin_layout Standard
Avant de parler de la réduction, il faut pouvoir déterminer si une variable
 est liée ou libre.
 Une variable est liée lorsque celle ci apparait à l'intérieur d'une abstraction.
 Dans le lambda terme suivant 
\begin_inset Formula $\Lambda$
\end_inset

x.x y la variable x est liée et la variable y est libre.
 Voici un dernier exemple pour retirer toute ambiguïté, (
\begin_inset Formula $\Lambda$
\end_inset

x.
\begin_inset Formula $\Lambda$
\end_inset

y.
 x y)y ici la variable x est liée ainsi que la première occurence de la
 variable y, cependant la variable y à l'exterieur des parenthèse est libre.
 Un terme dont l'ensemble de ses variables sont liées est dit clos.
 
\end_layout

\begin_layout Standard
Le fait de réduire un lambda terme peut être vu en suivant la même analogie
 que précédement comme le fait de calculer celui ci.
 On ne peut effectuer de réduction que sur les applications dont le membre
 de gauche est une abstraction, on appelle cela une redex.
 Le faite de réduire consiste à substituer dans le membre de gauche l'ensemble
 des variables liées par le terme de droite.
 
\end_layout

\begin_layout Standard
On peut donc formaliser une réduction ainsi (
\begin_inset Formula $\Lambda$
\end_inset

x.t)y -> t[x->y] .
 On peut donc utiliser notre fonction identité définie précedement à un
 terme t de la façon suivante (
\begin_inset Formula $\Lambda$
\end_inset

x.x)t -> t .
 Un lambda terme sous la forme normale est un terme ou plus aucune réduction
 n'est possible, certains termes peuvent ne pas avoir de forme normale comme
 le terme (
\begin_inset Formula $\Lambda$
\end_inset

x.xx)(
\begin_inset Formula $\Lambda$
\end_inset

x.xx)
\end_layout

\begin_layout Subsubsection
Les entiers de Church
\end_layout

\begin_layout Standard
Ici il faut faire une transition avec le fait que le lambda calcul non typé
 correspond au typage dynamique, alors que le lambda calcul est la version
 typage statique 
\end_layout

\begin_layout Standard
Le lambda calcul permet de définir beaucoup plus de choses que sa simplicité
 pourrait laisser croire.
 Ici nous allons montrer un exemple de programmation a l'aide du lambda
 calcul, les entiers de Church.
 Comme dans le lambda calcul il n'est possible que d'appliquer une fonction
 a un argument il va nous falloir appliquer une fonction n fois pour obtenir
 le l'entier n.
 
\end_layout

\begin_layout Standard
En voici une définition formelle:
\end_layout

\begin_layout LyX-Code
c0 = 
\begin_inset Formula $\Lambda$
\end_inset

s.
\begin_inset Formula $\Lambda$
\end_inset

z.z
\end_layout

\begin_layout LyX-Code
c1 = 
\begin_inset Formula $\Lambda$
\end_inset

s.
\begin_inset Formula $\Lambda$
\end_inset

z.s z
\end_layout

\begin_layout LyX-Code
c2 = 
\begin_inset Formula $\Lambda$
\end_inset

s.
\begin_inset Formula $\Lambda$
\end_inset

z.s(s z)
\end_layout

\begin_layout Standard
Ici c0 correspond à l'entier 0, c1 à l'entier 1 et ainsi de suite.
 Cette définition est très proche de la définition des entiers de Peano
 ou l'entier 2 se noterait successeur(successeur(0)).
 Maintenant voici la définition de la fonction successeur ainsi que la fonction
 d'addition dans le lambda calcul:
\end_layout

\begin_layout LyX-Code
successeur = 
\begin_inset Formula $\Lambda$
\end_inset

n.
\begin_inset Formula $\Lambda$
\end_inset

s.
\begin_inset Formula $\Lambda$
\end_inset

z.
 n s (s z)
\end_layout

\begin_layout LyX-Code
plus = 
\begin_inset Formula $\Lambda$
\end_inset

m.
\begin_inset Formula $\Lambda$
\end_inset

n.
\begin_inset Formula $\Lambda$
\end_inset

s.
\begin_inset Formula $\Lambda$
\end_inset

z.
 m s (n s z)
\end_layout

\begin_layout Standard
Pour la fonction plus, 
\end_layout

\begin_layout Standard
Ces défintions sont extraites du livre 
\begin_inset Quotes eld
\end_inset

types and programming languages
\begin_inset Quotes erd
\end_inset

 de Pierce.
\end_layout

\begin_layout Standard
Pour conclure sur le lambda calcul non typé, on peut apparenter cela à un
 système de type dynamique.
\end_layout

\begin_layout Subsection
Lambda Calcul simplement typé
\end_layout

\begin_layout Standard
En 1940 Alonzo Church publie un article 
\begin_inset Quotes eld
\end_inset

A Formulation of the Simple Theory of Types
\begin_inset Quotes erd
\end_inset

 où il définit le lambda calcul simplement typé.
 Celui ci perd en dynamisme et permet d'effectuer moins de calcul mais possède
 l'avantage de soulever les problèmes liés à la classification des données.
\end_layout

\begin_layout Subsubsection
règles de types
\end_layout

\begin_layout Standard
Le lambda calcul non typé permet de formaliser une infinité de ....
 mais l'absence de type ne lui permet pas de vérifier la validité de ses
 calculs.
 Pour tout programmeur il parait logique que l'expression 
\begin_inset Quotes eld
\end_inset

if <entier> then <booléens> else <booléens> n'a pas de sens car il faudrait
 que le résultat de l'expression de la condition soit un booléen et non
 un entier.
 C'est pour cette raison que les types sont intérressants car ils permettent
 de palier à ces erreurs d'éxecution.
 Nous allons donc nous intéresser à l'implémentation des booléens dans le
 lambda calcul.
 Avant toute chose il faut définir la notion de type.
\end_layout

\begin_layout LyX-Code
T ::=             Type
\end_layout

\begin_layout LyX-Code
        Bool      Type booléens
\end_layout

\begin_layout LyX-Code
        T->T      Type de fonction
\end_layout

\begin_layout Standard
Nous allons maintenant utiliser une notation explicitant le typage des variables
, 
\begin_inset Formula $\Lambda$
\end_inset

x:T.t signifie quand dans le terme t la variable liée x possède le type T.
 Nous allons maintenant définir les règles de typage pour les lambda termes.
 Pour déduire le type d'une variable à partir de son type est trivial: 
\begin_inset Formula $\frac{x:T}{x:T}$
\end_inset

 (cette expression se lit en partant du numérateur, supposons une variable
 x de type T, alors le type de la variable x est T).
 Les abstractions quant à elles nécessitent deux supositions: 
\begin_inset Formula $\frac{x:T1\: t:T2}{\Lambda x:T1.t\,:T1\rightarrow T2}$
\end_inset

 .
 En effet si l'on possède le type de la variable x ainsi que celui du terme
 t on peut donc conclure sur le type de l'abstraction qui sera une bijection
 entre T1 et T2.
 En suivant la même logique pour déterminer le type d'une application il
 nous faut le type de l'abstraction de gauche et le type du terme de droite:
 
\begin_inset Formula $\frac{t1:T1\rightarrow T2\; t2:T1}{t1\, t2\,:T2}$
\end_inset

 .
\end_layout

\begin_layout Subsubsection
La sécurité engendrée par les systèmes de type
\end_layout

\begin_layout Standard
Une des notions évoquée par Pierce dans son ouvrage est la sécurité offerte
 par les systèmes de types quant à la bonne éxecution du programme.
 En effet lors de la compilation dans un système de type statique les erreurs
 sont interceptées.
 Il faut maintenant définir deux notions essentielles:
\end_layout

\begin_layout Standard
Progress: soit t un terme correctement typé alors t est une valeur ou il
 existe une dérivation telle que t->t'
\end_layout

\begin_layout Standard
Preservation: si un terme est correctement typé alors si il existe une règle
 de dérivation pour ce terme, le terme obtenu est lui aussi correctement
 typé.
\end_layout

\begin_layout Standard
Ces deux règles permettent d'affirmer que la dérivation d'un terme correctement
 typé ne peut pas se terminer sur un état autre qu'un terme équivalent a
 une valeur.
 
\end_layout

\begin_layout Subsection
Les types dépendants
\end_layout

\begin_layout Standard
Dire que c'est plus dynamique que les statiques mais que cela s'effectue
 quand même lors de la compilation 
\end_layout

\begin_layout Subsubsection
Définition 
\end_layout

\begin_layout Standard
Les types dépendants permettent de déterminer le type d'un terme à l'aide
 de la valeur d'un autre terme auquel il est associé,
\end_layout

\begin_layout Standard
Les types dépendants permettent de caractériser les termes en fonction de
 leur valeur.
 Si l'on pose l'expression a =>b dans un typage statique pour déterminer
 le type de b on se base sur le type de a tandis que dans un système de
 type dépendant, le type de b sera determiné à l'aide de la valeur de a.
 Cela offre une souplesse supplémentaire dans l'évaluation des types en
 acceptant plus de programmes que si l'on utilisait un typage statique.
 Cependant la sécurité offerte par le système de type n'est pas altérée
 c'est pour cette raison que les types dépendants sont une bonne alternative.
\end_layout

\begin_layout Subsubsection
Règles de typage
\end_layout

\begin_layout Subsubsection
Exemple 
\end_layout

\begin_layout Standard
Avec le vecteur faire un exemple
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
Dans cette partie il est question de l'implémentation du lambda calcul non
 typé en précisant les choix de réalisation.
 Le language choisi pour cette implémentation et qui le restera pour l'ensemble
 de ce projet est Ocaml, un language fonctionnel dont la syntaxe permet
 de se rapprocher au plus des définitions mathématiques, ce qui rend le
 passage des définitions théoriques aux implémentations plus aisées.
\end_layout

\begin_layout Subsection
Lieurs
\end_layout

\begin_layout Standard
Le premier problème auquel j'ai été confronté fut la représentation qu'il
 fallait donner des variables libres ainsi que des variables liées.
 D'un point de vue algorithmique lors du parcours d'un terme determiné si
 une variable est liée peut s'avérer complexe et nécéssiterait de nombreuses
 opérations supplémentaires.
 Dans le livre 
\begin_inset Quotes eld
\end_inset

Types and programming languages
\begin_inset Quotes erd
\end_inset

 l'auteur choisit de ne plus définir les variables par des charactères mais
 avec des entiers.
 C'est ce que l'on appel les indices de de Bruijn.
 Prenons un exemple pour comprendre, le terme (
\begin_inset Formula $\Lambda$
\end_inset

x.
\begin_inset Formula $\Lambda$
\end_inset

y.xy)x peut se représenter de cette façon (
\begin_inset Formula $\Lambda$
\end_inset

.
\begin_inset Formula $\Lambda$
\end_inset

10)2.
 Dans cette représentation les variables sont représentées en fonction du
 nombre de lieurs les précédant.
 Ici 
\begin_inset Quotes eld
\end_inset

y
\begin_inset Quotes erd
\end_inset

 est représentée par l'entier 0 car elle est liée au premier lieur à sa
 gauche.
 Même raisonnement pour la première occurence de x, cependant la seconde
 occurence de x est une variable libre elle est donc représentée par une
 valeur au dessus de toutes les valeurs possibles.
 Cette représentation permet donc de rendre l'implémentation plus aisée,
 cependant lorsque l'on souhaite effectuer une réduction il faut introduire
 une nouvelle opération, le 
\begin_inset Quotes eld
\end_inset

shift
\begin_inset Quotes erd
\end_inset

 comme expliqué dans l'ouvrage de Pierce.
\end_layout

\begin_layout Standard
Dans un article 
\begin_inset Quotes eld
\end_inset

A tutorial implementation of dependently typed lambda calculus
\begin_inset Quotes erd
\end_inset

 il est question de la représentation des variables avec les indices de
 de Bruijn mais cette fois ci on laisse les variables libres sous la forme
 de caractère.
 Le terme précédent s'écrirait donc (
\begin_inset Formula $\Lambda$
\end_inset

.
\begin_inset Formula $\Lambda$
\end_inset

.1 0)x .
 Cette notation permet de supprimer cette l'opération de 
\begin_inset Quotes eld
\end_inset

shift
\begin_inset Quotes erd
\end_inset

.
 Voici donc l'implémentation que nous avons choisi des lambda terme en Ocaml.
\end_layout

\begin_layout LyX-Code
type lambda_term =   
\end_layout

\begin_layout LyX-Code
   | FreeVar of string    
\end_layout

\begin_layout LyX-Code
   | BoundVar of int    
\end_layout

\begin_layout LyX-Code
   | Abs of lambda_term   
\end_layout

\begin_layout LyX-Code
   | Appl of (lambda_term * lambda_term)
\end_layout

\begin_layout Standard
Afin de s'implifier la lecture des lambda terme voici une fonction permettant
 de convertir un lambda terme en chaîne de caractère.
\end_layout

\begin_layout LyX-Code
let rec lambda_term_to_string t = 
\end_layout

\begin_layout LyX-Code
   match t with 
\end_layout

\begin_layout LyX-Code
   | FreeVar v -> v 
\end_layout

\begin_layout LyX-Code
   | BoundVar v -> string_of_int v 
\end_layout

\begin_layout LyX-Code
   | Abs x -> "[]." ^ lambda_term_to_string x 
\end_layout

\begin_layout LyX-Code
   | Appl (x,y) -> "(" ^ lambda_term_to_string x ^ " " ^ lambda_term_to_string
 y ^ ")"
\end_layout

\begin_layout Subsection
Substitution et réduction 
\end_layout

\begin_layout Standard
Il faut maintenant définir l'opération de réduction, comme expliqué dans
 le chapitre 1.1.3 cela équivaut à substituer les occurrences des variables
 liées dans l'abstraction de gauche par les termes de droite.
 J'ai donc choisi de définir tout d'abord une fonction récursive de substitution
 afin de pouvoir l'utiliser plus tard dans la fonction de réduction.
 La subtilité de cette fonction réside dans le fait que à chaque fois que
 l'on rencontre un lieur il faut appeler la fonction substitution mais cette
 fois ci avec l'indice de la variable liée incrémenté de un.
 
\end_layout

\begin_layout LyX-Code
let rec substitution t indice tsub = 
\end_layout

\begin_layout LyX-Code
   match t with 
\end_layout

\begin_layout LyX-Code
   | FreeVar v -> FreeVar v 
\end_layout

\begin_layout LyX-Code
   | BoundVar v -> if v = indice then tsub else BoundVar v 
\end_layout

\begin_layout LyX-Code
   | Abs x -> Abs(substitution x (indice+1) tsub) 
\end_layout

\begin_layout LyX-Code
   | Appl (x,y) -> Appl(substitution x indice tsub,substitution y indice
 tsub)
\end_layout

\begin_layout Standard
On ne peut appliquer une réduction qu'à un terme dont le membre de gauche
 est une abstraction.
 Cette fonction de réduction se contente simplement d'appeler la fonction
 substitution seulement sur les redex.
 
\end_layout

\begin_layout LyX-Code
let reduction t = 
\end_layout

\begin_layout LyX-Code
   match t with 
\end_layout

\begin_layout LyX-Code
   | FreeVar v -> FreeVar v 
\end_layout

\begin_layout LyX-Code
   | BoundVar v -> BoundVar v 
\end_layout

\begin_layout LyX-Code
   | Abs x -> Abs(x) 
\end_layout

\begin_layout LyX-Code
   | Appl(Abs(x),y) -> substitution x 0 y 
\end_layout

\begin_layout LyX-Code
   | Appl(x,y) -> failwith "erreur"
\end_layout

\begin_layout Standard
Ici les applications n'étant pas considérées comme réductibles on renvoie
 une erreur.
 Ce choix d'implémentation sera expliqué par la suite lorsque nous aurons
 définis la fonction d'évaluation.
 Afin de réduire un terme jusqu'a sa forme normal si elle existe peut etre
 considéré comme une opération de normalisation, mais étant donné que certains
 termes ne peuvent pas se réduire nous avons décidé d'appeler cette fonction
 évaluation.
 Il existe de nombreuses stratégies afin de calculer les lambda termes,
 nous avons choisis la stratégie 
\begin_inset Quotes eld
\end_inset

call by name
\begin_inset Quotes erd
\end_inset

 (c'est ainsi qu'elle est énoncée dans 
\begin_inset Quotes eld
\end_inset

Types and programming languages
\begin_inset Quotes erd
\end_inset

).
 Cette stratégie consite a considérer l'ensemble du lambda terme, si celui
 ci 
\end_layout

\begin_layout Standard
call by name qui n'autorise pas l'évaluation a l'intérieur des abstractions.
\end_layout

\end_body
\end_document
